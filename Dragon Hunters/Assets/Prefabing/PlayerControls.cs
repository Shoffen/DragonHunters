//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player movement"",
            ""id"": ""2d6460d7-3efb-4a61-bab2-490b94c489f2"",
            ""actions"": [
                {
                    ""name"": ""MOVEMENT"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4323c78d-d21c-442f-8f22-9244f089300b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a3fb3574-8095-4c6f-97dd-3d870d9b9731"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4be17fc1-8760-4441-9729-46c1c7e08eeb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""03589a70-badf-44b6-b303-0a190887bc00"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""56034966-e48e-4c16-8ba9-ee64f58852c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""51f8d6f5-7ffc-450a-9f94-e69008e6c6f0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player movement
        m_Playermovement = asset.FindActionMap("Player movement", throwIfNotFound: true);
        m_Playermovement_MOVEMENT = m_Playermovement.FindAction("MOVEMENT", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player movement
    private readonly InputActionMap m_Playermovement;
    private IPlayermovementActions m_PlayermovementActionsCallbackInterface;
    private readonly InputAction m_Playermovement_MOVEMENT;
    public struct PlayermovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayermovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MOVEMENT => m_Wrapper.m_Playermovement_MOVEMENT;
        public InputActionMap Get() { return m_Wrapper.m_Playermovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayermovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayermovementActions instance)
        {
            if (m_Wrapper.m_PlayermovementActionsCallbackInterface != null)
            {
                @MOVEMENT.started -= m_Wrapper.m_PlayermovementActionsCallbackInterface.OnMOVEMENT;
                @MOVEMENT.performed -= m_Wrapper.m_PlayermovementActionsCallbackInterface.OnMOVEMENT;
                @MOVEMENT.canceled -= m_Wrapper.m_PlayermovementActionsCallbackInterface.OnMOVEMENT;
            }
            m_Wrapper.m_PlayermovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MOVEMENT.started += instance.OnMOVEMENT;
                @MOVEMENT.performed += instance.OnMOVEMENT;
                @MOVEMENT.canceled += instance.OnMOVEMENT;
            }
        }
    }
    public PlayermovementActions @Playermovement => new PlayermovementActions(this);
    public interface IPlayermovementActions
    {
        void OnMOVEMENT(InputAction.CallbackContext context);
    }
}
